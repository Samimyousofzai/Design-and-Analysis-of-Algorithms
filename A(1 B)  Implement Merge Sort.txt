def merge_sort(arr):
    comparisons = 0
    
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        
        # Recursively sort the left and right halves
        comparisons += merge_sort(left_half)
        comparisons += merge_sort(right_half)
        
        # Merge the sorted halves
        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1
            comparisons += 1
        
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1
        
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1
    
    return comparisons

arr = [5, 2, 8, 12, 3]
comparisons = merge_sort(arr)
print("Number of comparisons:", comparisons)
print("Sorted array:", arr)

----------------------------------------------------------
arr = [5, 2, 8, 12, 3]
comparisons = merge_sort(arr)
print("Number of comparisons:", comparisons)
print("Sorted array:", arr)

---------------------------------------------------------------
Number of comparisons: 7
Sorted array: [2, 3, 5, 8, 12]

