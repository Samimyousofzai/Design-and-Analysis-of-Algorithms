from collections import defaultdict

# Class to represent a graph
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = defaultdict(list)

    def add_edge(self, u, v, w):
        self.graph[u].append((v, w))
        self.graph[v].append((u, w))

    # Prim's algorithm to find the minimum spanning tree
    def prim_mst(self):
        # Initialize arrays to track minimum weight and visited nodes
        key = [float('inf')] * self.V
        parent = [None] * self.V
        key[0] = 0
        mst_set = [False] * self.V

        for _ in range(self.V):
            # Find the vertex with minimum weight that has not been visited
            u = self.min_key(key, mst_set)
            mst_set[u] = True

            # Update key values and parent array for adjacent vertices
            for v, w in self.graph[u]:
                if not mst_set[v] and w < key[v]:
                    key[v] = w
                    parent[v] = u

        print("Minimum Spanning Tree (Prim's Algorithm):")
        self.print_mst(parent)

    # Utility function to find the vertex with minimum weight
    def min_key(self, key, mst_set):
        min_val = float('inf')
        min_index = -1

        for v in range(self.V):
            if not mst_set[v] and key[v] < min_val:
                min_val = key[v]
                min_index = v

        return min_index

    # Utility function to print the minimum spanning tree
    def print_mst(self, parent):
        for i in range(1, self.V):
            print(f"Edge: {parent[i]} - {i}, Weight: {self.get_weight(parent[i], i)}")

    # Utility function to get the weight of an edge
    def get_weight(self, u, v):
        for vertex, weight in self.graph[u]:
            if vertex == v:
                return weight

# Class to represent the Disjoint Set Union data structure
class DisjointSet:
    def __init__(self, vertices):
        self.V = vertices
        self.parent = [i for i in range(vertices)]
        self.rank = [0] * vertices

    # Find the set to which a vertex belongs
    def find(self, v):
        if self.parent[v] != v:
            self.parent[v] = self.find(self.parent[v])
        return self.parent[v]

    # Perform union of two sets
    def union(self, u, v):
        u_root = self.find(u)
        v_root = self.find(v)

        if self.rank[u_root] < self.rank[v_root]:
            self.parent[u_root] = v_root
        elif self.rank[u_root] > self.rank[v_root]:
            self.parent[v_root] = u_root
        else:
            self.parent[v_root] = u_root
            self.rank[u_root] += 1

# Kruskal's algorithm to find the minimum spanning tree
def kruskal_mst(graph):
    result = []
    i = 0
    e = 0
    graph.graph = sorted(graph.graph, key=lambda item: item[2])

    disjoint_set = DisjointSet(graph.V)

    while e < graph.V - 1:
        u, v, w = graph.graph[i]
        i += 1
        x = disjoint_set.find
